{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkReply(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    ;\n  }\n  _request(url, options) {\n    return fetch(`${this._baseUrl}/${url}`, options).then(this._checkReply);\n  }\n  getUserData() {\n    return this._request(`users/me`, {\n      method: 'GET',\n      headers: this._headers\n    });\n  }\n  updateUserData(data) {\n    return this._request(`users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n  }\n  updateAvatar(data) {\n    return this._request(`users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n  }\n  getCards() {\n    return this._request(`cards`, {\n      method: 'GET',\n      headers: this._headers\n    });\n  }\n  addNewCard(data) {\n    return this._request(`cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    });\n  }\n  addLikeCard(idCard) {\n    return this._request(`cards/${idCard}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    });\n  }\n  removeLikeCard(idCard) {\n    return this._request(`cards/${idCard}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n  }\n  changeLikeCardStatus(idCard, isLiked) {\n    if (isLiked) {\n      return this.addLikeCard(idCard);\n    } else {\n      return this.removeLikeCard(idCard);\n    }\n  }\n  deleteCard(idCard) {\n    return this._request(`cards/${idCard}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-65/',\n  headers: {\n    authorization: '36c21e13-089d-4ac8-bd26-b85419c729aa',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_baseUrl","_headers","_checkReply","res","ok","json","Promise","reject","status","_request","url","options","fetch","then","getUserData","method","updateUserData","data","body","JSON","stringify","name","about","updateAvatar","avatar","getCards","addNewCard","link","addLikeCard","idCard","removeLikeCard","changeLikeCardStatus","isLiked","deleteCard","api","authorization"],"sources":["/Users/olgagerasimenko/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    _checkReply(res) {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Ошибка: ${res.status}`)\n        };\n    }\n\n    _request(url, options) {\n        return fetch(`${this._baseUrl}/${url}`, options).then(this._checkReply)\n    }\n\n\n    getUserData() {\n        return this._request(`users/me`, {\n            method: 'GET',\n            headers: this._headers\n        })\n    }\n\n    updateUserData(data) {\n        return this._request(`users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n    }\n\n    updateAvatar(data) {\n        return this._request(`users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar\n            })\n        })\n    }\n\n    getCards() {\n        return this._request(`cards`, {\n            method: 'GET',\n            headers: this._headers\n        })\n    }\n\n    addNewCard(data) {\n        return this._request(`cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n    }\n\n    addLikeCard(idCard) {\n        return this._request(`cards/${idCard}/likes`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n    }\n\n    removeLikeCard(idCard) {\n        return this._request(`cards/${idCard}/likes`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n    }\n\n    changeLikeCardStatus(idCard, isLiked) {\n        if (isLiked) {\n            return this.addLikeCard(idCard);\n        } else {\n            return this.removeLikeCard(idCard);\n        }\n    }\n\n    deleteCard(idCard) {\n        return this._request(`cards/${idCard}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n    }\n}\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-65/',\n    headers: {\n        authorization: '36c21e13-089d-4ac8-bd26-b85419c729aa',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}